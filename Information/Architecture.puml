@startuml

title Architecture Diagram of AIctron

skinparam component {
    BackgroundColor White
    BorderColor Black
    ArrowColor Black
}

package "Backend" {
    object "api.aictron.arnaudmichel.fr" as api_dns

    class "API" {
        - app: Flask
        + __init__()
        + define_routes()
        + _get_routes()
        + _get_data(data)
        + run()
    }

    class api_logic {
        + upload(cls, request)
        + select_target(cls, request)
        + predict(cls, request)
        + get_prediction(cls)
        + get_columns(cls)
        + get_columns_without_target(cls)
    }

    class ai_logic {
        - df: pd.DataFrame
        - imputer: SimpleImputer
        - modef: SklearnModel
        - target: str
        + load_data(cls, filepaths)
        + select_target(cls, target)
        + train(cls)
        + normalisation(cls, dataToNormalise)
        + predict(cls, dataToPredict)
    }

    class dataset.csv {
    }

    api_dns --> "API"
    api_dns <-- "API"
    "API" --> "api_logic"
    "api_logic" --> "ai_logic"
    "api_logic" --> "dataset.csv"
    "ai_logic" --> "dataset.csv"
}

package Frontend[React] {
    object "aictron.arnaudmichel.fr" as frontend_dns

    class "App" {

    }

    package components as maincomp {
        class Layout {
            + children: ReactNode
        }
        class Header {
        }
        class Footer {
        }

        Header --> Layout
        Footer --> Layout
    }

    package pages {

        class "Home" {

        }

        class "Contribute" {

        }
        package "components" {
            class "Upload" {
                + handleFileChange()
            class "ColumnChoice" {
                - columns: []
                - isLoading: bool
                + useEffect()
                + handleSubmit()
            }
            class "NewValues" {
                - columns: []
                + handleSubmit()
                + handleFileChange()
            }
            class "ResultFile" {
                - tableRows: []
                - values: []
                + handleSubmit()
            }
            class "ResultText" {
                - selected_column: str
                - prediction: str
            }
        }
        Layout --|> "Home"
        Layout --|> "Contribute"
        Layout --|> "Upload"
        Layout --|> "ColumnChoice"
        Layout --|> "NewValues"
        Layout --|> "ResultFile"
        Layout --|> "ResultText"

        "Home" -> "Upload"
        "Home" -> "Contribute"
        "Upload" -> "ColumnChoice"
        "ColumnChoice" -> "NewValues"
        "NewValues" -> "ResultFile"
    }

    frontend_dns --> "App"
    "App" -> maincomp
    "App" --> pages

}

"Upload" ----> api_dns: upload the dataset.csv
"ColumnChoice" ----> api_dns: select the target column
"NewValues" ----> api_dns: predict the new values
"ResultFile" ----> api_dns: download the result file
"ResultText" ----> api_dns: get the prediction


footer Made by: Arnaud Michel and Quentin Macheda

@enduml